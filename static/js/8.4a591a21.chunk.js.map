{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","ComicsList","useState","comicsList","setComicsList","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComics","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","className","arr","list","map","item","i","CSSTransition","timeout","classNames","to","id","src","thumbnail","alt","title","price","TransitionGroup","component","renderItem","disabled","style","onClick","ComicsPage","Helmet","name","content","AppBanner","display","width","height","objectFit","margin","img","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","data","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","res","results","_transformCharacter","getCharacter","char","description","path","extension","homepage","urls","wiki","comics","items","slice","getCharacterByName","_transformComics","getComic","pageCount","language","textObjects","prices","avengers","avengersLogo"],"mappings":"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","file":"static/js/8.4a591a21.chunk.js","sourcesContent":["import { useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting': \n            return <Spinner/>;\n        case 'loading': \n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed': \n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        \n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItem (arr) {\n        const list = arr.map((item, i) => {\n            return (\n                <CSSTransition timeout={500} classNames=\"comics__item\" key={i}>\n                    <li className=\"comics__item\" key={i} >\n                        <Link to={`/comics/${item.id}`}>\n                            <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                            <div className=\"comics__item-name\">{item.title}</div>\n                            <div className=\"comics__item-price\">{item.price}$</div>\n                        </Link>\n                    </li>\n                </CSSTransition>\n            )\n        })\n    \n        return (\n            <ul className=\"comics__grid\">\n                <TransitionGroup component={null}>\n                    {list}\n                </TransitionGroup> \n            </ul>\n        )\n    }\n    \n    /* const items = renderItem(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null; */\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItem(comicsList), newItemLoading)}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': comicsEnded ? \"none\" : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\n\nimport ComicsList from \"../comicsList/ComicsList\";\nimport AppBanner from \"../appBanner/AppBanner\";\n\nconst ComicsPage = () => {\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Page with list of our comics\"\n                />\n                <title>Comics page</title>\n            </Helmet>\n            <AppBanner/>\n            <ComicsList/>\n        </>\n    )\n}\n\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=64ef3ab1205888e0cb64123cc4133373';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n    \n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? char.description : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items.length < 10 ? char.comics.items : char.comics.items.slice(0, 10)\n        }\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics)\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description ? comics.description : 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\n        }\n    }\n\n    return {getAllCharacters, \n            getCharacter, \n            process, \n            clearError, \n            getAllComics, \n            getComic, \n            getCharacterByName,\n            setProcess}\n}\n\nexport default useMarvelService;","import {useState, useCallback} from \"react\"\n\nexport const useHttp = () => {\n    /* const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null); */\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        /* setLoading(true); */\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            /* setLoading(false); */\n            return data;\n        } catch(e) {\n            /* setLoading(false); */\n            /* setError(e.message); */\n            setProcess('error');\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => {\n        /* setError(null); */\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}
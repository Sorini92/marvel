{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/searchForm/SearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","src","style","alt","slice","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","charRefs","useRef","focused","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","list","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItem","disabled","comics","to","resourceURI","CharInfo","charId","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","SearchForm","getCharacterByName","errorMessage","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","Helmet","content","decoration","display","width","height","objectFit","margin","img","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","_baseOffset","res","_transformCharacter","path","extension","urls","items","getAllComics","_transformComics","getComic","title","pageCount","language","textObjects","price","prices","Skeleton"],"mappings":"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","file":"static/js/7.1fa7439d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () =>  {\n\n    const [char, setChar] = useState({});\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        /* const timerId = setInterval(updateChar, 30000);\n\n        return () => {\n            clearInterval(timerId);\n        } */\n        // eslint-disable-next-line\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))     \n    }\n\n    /* const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null; */\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={imgStyle} alt=\"Random character\" className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description ?  description.slice(0, 210) : 'There is no description for this character'}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport PropTypes from 'prop-types';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting': \n            return <Spinner/>;\n        case 'loading': \n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed': \n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        \n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n    }\n\n    const charRefs = useRef([]);\n\n    const focused = (id) => {\n        charRefs.current.forEach(item => item.classList.remove('char__item_selected'))\n        charRefs.current[id].classList.add('char__item_selected');\n        charRefs.current[id].focus();\n    }\n\n    function renderItem (arr) {\n        const list = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'contain'};\n            }\n            \n            return (\n                <CSSTransition timeout={500} classNames=\"char__item\" key={item.id}>\n                    <li \n                        tabIndex={0} \n                        ref={el => charRefs.current[i] = el} \n                        className=\"char__item\" \n                        onClick={() => {\n                            focused(i);\n                            props.onCharSelected(item.id)\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === 'Enter') {\n                                focused(i);\n                                props.onCharSelected(item.id)\n                            }\n                        }}>\n                        <img src={item.thumbnail} style={imgStyle} alt={item.name}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        })\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {list}\n                </TransitionGroup> \n            </ul>\n        )\n    }\n\n    /* const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null; */\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItem(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? \"none\" : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport setContent from '../../utils/setContent';\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n    \n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    /* const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null; */\n\n    return (\n        <div className=\"char__info\">\n            {/* {skeleton}\n            {errorMessage}\n            {spinner}\n            {content} */}\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`${item.resourceURI.slice(35)}`}>{item.name}</Link>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo)\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './searchForm.scss';\n\nconst SearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={process === 'loading'}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default SearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport SearchForm from '../searchForm/SearchForm';\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <SearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=64ef3ab1205888e0cb64123cc4133373';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n    \n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? char.description : 'There is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items.length < 10 ? char.comics.items : char.comics.items.slice(0, 10)\n        }\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics)\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description ? comics.description : 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available'\n        }\n    }\n\n    return {getAllCharacters, \n            getCharacter, \n            process, \n            clearError, \n            getAllComics, \n            getComic, \n            getCharacterByName,\n            setProcess}\n}\n\nexport default useMarvelService;","import {useState, useCallback} from \"react\"\n\nexport const useHttp = () => {\n    /* const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null); */\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        /* setLoading(true); */\n        setProcess('loading');\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            /* setLoading(false); */\n            return data;\n        } catch(e) {\n            /* setLoading(false); */\n            /* setError(e.message); */\n            setProcess('error');\n            throw e;\n        }\n    }, [])\n\n    const clearError = useCallback(() => {\n        /* setError(null); */\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner'\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting': \n            return <Skeleton/>;\n        case 'loading': \n            return <Spinner/>;\n        case 'confirmed': \n            return <Component data={data}/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nexport default setContent;"],"sourceRoot":""}